% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run.R
\name{run_mcmc}
\alias{run_mcmc}
\title{Run drjacoby MCMC}
\usage{
run_mcmc(
  data,
  df_params,
  loglike,
  logprior,
  burnin,
  samples,
  misc = list(),
  rungs = 1L,
  chains = 1,
  beta_manual = NULL,
  alpha = 1,
  target_acceptance = 0.44,
  cluster = NULL,
  coupling_on = TRUE,
  progress = TRUE
)
}
\arguments{
\item{data}{a named list or data frame or data values.}

\item{df_params}{a data.frame of parameters (see \code{?define_params}).}

\item{loglike, logprior}{the log-likelihood and log-prior functions used in
the MCMC. Can either be passed in as R functions (not in quotes), or as
character strings naming compiled C++ functions (in quotes).}

\item{burnin}{the number of burn-in iterations. Automatic tuning of proposal
standard deviations is only active during the burn-in period.}

\item{samples}{the number of sampling iterations.}

\item{misc}{optional list object passed to likelihood and prior. This can be
useful for passing values that are not strictly data, for example passing a
lookup table to the prior function.}

\item{rungs}{the number of temperature rungs used in the parallel tempering
method. By default, \eqn{\beta} values are equally spaced between 0 and 1,
i.e. \eqn{\beta[i]=}\code{(i-1)/(rungs-1)} for \code{i} in \code{1:rungs}.
The likelihood for the \out{i<sup>th</sup>} heated chain is raised to the
power \eqn{\beta[i]^\alpha}, meaning we can use the \eqn{\alpha} parameter
to concentrate rungs towards the start or the end of the interval (see the
\code{alpha} argument).}

\item{chains}{the number of independent replicates of the MCMC to run. If a
\code{cluster} object is defined then these chains are run in parallel,
otherwise they are run in serial.}

\item{beta_manual}{vector of manually defined \eqn{\beta} values used in the
parallel tempering approach. If defined, this overrides the spacing defined
by \code{rungs}. Note that even manually defined \eqn{\beta} values are
raised to the power \eqn{\alpha} internally, hence you should set
\code{alpha = 1} if you want to fix \eqn{\beta} values exactly.}

\item{alpha}{the likelihood for the \out{i<sup>th</sup>} heated chain is
raised to the power \eqn{\beta[i]^\alpha}, meaning we can use the
\eqn{\alpha} parameter to concentrate rungs towards the start or the end of
the temperature scale.}

\item{target_acceptance}{Target acceptance rate. Should be between 0 and 1.
Default of 0.44, set as optimum for unvariate proposal distributions.}

\item{cluster}{option to pass in a cluster environment, allowing chains to be
run in parallel (see package "parallel").}

\item{coupling_on}{whether to implement Metropolis-coupling over temperature
rungs. The option of deactivating coupling has been retained for general
interest and debugging purposes only. If this parameter is \code{FALSE}
then parallel tempering will have no impact on MCMC mixing.}

\item{pb_markdown}{whether to run progress bars in markdown mode, meaning
they are only updated when they reach 100\% to avoid large amounts of output
being printed to markdown files.}

\item{save_data}{if \code{TRUE} (the default) the raw input data is stored
for reference in the project output. This allows complete reproducibility
from a project, but may be undesirable when datasets are very large.}

\item{save_hot_draws}{if \code{TRUE} the parameter draws relating to the hot
chains are also stored inside the \code{pt} element of the project output.
If \code{FALSE} (the default) only log-likelihoods and log-priors are
stored from heated chains.}

\item{silent}{whether to suppress all console output.}
}
\description{
Run MCMC either with or without parallel tempering turned on.
  Minimum inputs include a data object, a data.frame of parameters, a
  log-likelihood function and a log-prior function. Produces an object of
  class \code{drjacoby_output}, which contains all MCMC output along with
  some diagnostics and a record of inputs.
}
\details{
Note that both \code{data} and \code{misc} are passed into
  log-likelihood/log-prior functions *by reference*. This means if you modify
  these objects inside the functions then any changes will persist.
}
